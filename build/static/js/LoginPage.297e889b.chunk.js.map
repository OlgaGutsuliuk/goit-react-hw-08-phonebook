{"version":3,"sources":["pages/LoginPage.js","redux/auth/authOperations.js"],"names":["validationSchema","Yup","shape","email","required","password","TextInput","props","useField","field","meta","className","classNames","error","touched","LoginPage","dispatch","useDispatch","style","backgroundImage","initialValues","onSubmit","state","loginOperations","htmlFor","name","id","type","placeholder","to","API_KEY","registerOperations","user","a","registerRequest","axios","post","returnSecureToken","data","registerSuccess","console","log","registerError","response","message","loginRequest","loginSuccess","loginError"],"mappings":"mPAQMA,EAAmBC,MAAaC,MAAM,CAC1CC,MAAOF,MACJE,MAAM,yBACNC,SAAS,sBACZC,SAAUJ,MAAaG,SAAS,uBAGrBE,EAAY,SAACC,GACxB,MAAsBC,YAASD,GAA/B,mBAAOE,EAAP,KAAcC,EAAd,KACA,OACE,qCACE,+CACEC,UAAWC,IACT,0IACA,CACE,iBAAkBF,EAAKG,OAASH,EAAKI,WAGrCL,GACAF,IAELG,EAAKI,SAAWJ,EAAKG,MACpB,mBAAGF,UAAU,8BAAb,SAA4CD,EAAKG,QAC/C,SAqFKE,UAhFG,WAChB,IAAMC,EAAWC,cAEjB,OACE,qBAAKN,UAAU,oBAAf,SACE,qBAAKA,UAAU,iCAAf,SACE,sBAAKA,UAAU,kCAAf,UACE,qBACEA,UAAU,2EACVO,MAAO,CACLC,gBAAgB,4DAGpB,sBAAKR,UAAU,4DAAf,UACE,oBAAIA,UAAU,4BAAd,2BACA,cAAC,IAAD,CACES,cAAe,CACbjB,MAAO,GACPE,SAAU,IAEZL,iBAAkBA,EAClBqB,SAnBC,SAACC,GAAD,OAAUN,EAASO,YAAgBD,KAatC,SAQE,eAAC,IAAD,CAAMX,UAAU,uCAAhB,UACE,sBAAKA,UAAU,OAAf,UACE,uBACEA,UAAU,6CACVa,QAAQ,WAFV,sBAMA,cAAClB,EAAD,CACEmB,KAAK,QACLC,GAAG,WACHC,KAAK,OACLC,YAAY,gBAGhB,sBAAKjB,UAAU,OAAf,UACE,uBACEA,UAAU,6CACVa,QAAQ,WAFV,sBAMA,cAAClB,EAAD,CACEmB,KAAK,WACLC,GAAG,WACHC,KAAK,WACLC,YAAY,0BAGhB,qBAAKjB,UAAU,mBAAf,SACE,wBACEA,UAAU,2HACVgB,KAAK,SAFP,uBAOF,oBAAIhB,UAAU,kBACd,qBAAKA,UAAU,cAAf,SACE,cAAC,IAAD,CACEA,UAAU,wEACVkB,GAAG,YAFL,mD,iKChGZC,EAAU,0CAGHC,EAAqB,SAACC,GAAD,8CAAU,WAAMhB,GAAN,iBAAAiB,EAAA,6DACxCjB,EAASkB,eAD+B,kBAGbC,IAAMC,KAAN,wEAA4EN,GAA5E,2BAA4FE,GAA5F,IAAkGK,mBAAmB,KAHxG,gBAG5BC,EAH4B,EAG5BA,KACRtB,EAASuB,YAAgBD,IACzBE,QAAQC,IAAIH,GALwB,kDAOrCtB,EAAS0B,YAAc,KAAMC,SAASL,KAAKzB,MAAM+B,UAPZ,0DAAV,uDAWrBrB,EAAkB,SAACS,GAAD,8CAAU,WAAMhB,GAAN,iBAAAiB,EAAA,6DACrCjB,EAAS6B,eAD4B,kBAGXV,IAAMC,KAAN,oFAAwFN,GAAxF,2BAAwGE,GAAxG,IAA8GK,mBAAmB,KAHtH,gBAG1BC,EAH0B,EAG1BA,KACRtB,EAAS8B,YAAaR,IAJY,gDAMjCtB,EAAS+B,YAAW,KAAMJ,SAASL,KAAKzB,MAAM+B,UANb,yDAAV","file":"static/js/LoginPage.297e889b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik, Form, useField } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport * as Yup from \"yup\";\nimport classNames from \"classnames\";\nimport { loginOperations } from \"../redux/auth/authOperations\";\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Email must be @email!\")\n    .required(\"Field is Required!\"),\n  password: Yup.string().required(\"Field is Required\"),\n});\n\nexport const TextInput = (props) => {\n  const [field, meta] = useField(props);\n  return (\n    <>\n      <input\n        className={classNames(\n          \"w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline\",\n          {\n            \"border-red-500\": meta.error && meta.touched,\n          }\n        )}\n        {...field}\n        {...props}\n      />\n      {meta.touched && meta.error ? (\n        <p className=\"text-xs italic text-red-500\">{meta.error}</p>\n      ) : null}\n    </>\n  );\n};\n\nconst LoginPage = () => {\n  const dispatch = useDispatch()\n  const login =(state)=> dispatch(loginOperations(state))\n  return (\n    <div className=\"container mx-auto\">\n      <div className=\"flex justify-center px-6 my-12\">\n        <div className=\"w-full xl:w-3/4 lg:w-11/12 flex\">\n          <div\n            className=\"w-full h-auto bg-gray-400 hidden lg:block lg:w-1/2 bg-cover rounded-l-lg\"\n            style={{\n              backgroundImage: `url(\"https://source.unsplash.com/K4mSJ7kc0As/600x800\")`,\n            }}\n          />\n          <div className=\"w-full lg:w-1/2 bg-white p-5 rounded-lg lg:rounded-l-none\">\n            <h3 className=\"pt-4 text-2xl text-center\">Welcome Back!</h3>\n            <Formik\n              initialValues={{\n                email: \"\",\n                password: \"\",\n              }}\n              validationSchema={validationSchema}\n              onSubmit={login}\n            >\n              <Form className=\"px-8 pt-6 pb-8 mb-4 bg-white rounded\">\n                <div className=\"mb-4\">\n                  <label\n                    className=\"block mb-2 text-sm font-bold text-gray-700\"\n                    htmlFor=\"username\"\n                  >\n                    Username\n                  </label>\n                  <TextInput\n                    name=\"email\"\n                    id=\"username\"\n                    type=\"text\"\n                    placeholder=\"Username\"\n                  />\n                </div>\n                <div className=\"mb-4\">\n                  <label\n                    className=\"block mb-2 text-sm font-bold text-gray-700\"\n                    htmlFor=\"password\"\n                  >\n                    Password\n                  </label>\n                  <TextInput\n                    name=\"password\"\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"******************\"\n                  />\n                </div>\n                <div className=\"mb-6 text-center\">\n                  <button\n                    className=\"w-full px-4 py-2 font-bold text-white bg-blue-500 rounded-full hover:bg-blue-700 focus:outline-none focus:shadow-outline\"\n                    type=\"submit\"\n                  >\n                    Sign In\n                  </button>\n                </div>\n                <hr className=\"mb-6 border-t\" />\n                <div className=\"text-center\">\n                  <Link\n                    className=\"inline-block text-sm text-blue-500 align-baseline hover:text-blue-800\"\n                    to=\"/register\"\n                  >\n                    Create an Account!\n                  </Link>\n                </div>\n              </Form>\n            </Formik>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\n\nexport default LoginPage;","import axios from \"axios\"\nimport { loginError, loginRequest, loginSuccess, registerError, registerRequest, registerSuccess } from \"./authActions\";\nconst API_KEY = \"AIzaSyAzlNZEwhhrTyuz9kfceGBhuxPKQFPkxRw\"\n\n\nexport const registerOperations = (user) => async dispatch => {\n    dispatch(registerRequest())\n    try {\n        const { data } = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${API_KEY}`, { ...user, returnSecureToken: true })\n        dispatch(registerSuccess(data))\n        console.log(data);\n    } catch (error) {\n       dispatch(registerError(error.response.data.error.message))\n    }\n};\n\nexport const loginOperations = (user) => async dispatch => {\n    dispatch(loginRequest())\n   try {\n       const { data } = await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${API_KEY}`, { ...user, returnSecureToken: true })\n       dispatch(loginSuccess(data))\n   } catch (error) {\n        dispatch(loginError(error.response.data.error.message))\n   } \n}\n"],"sourceRoot":""}